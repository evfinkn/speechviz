#!/usr/bin/env node
const args = require("minimist")(process.argv.slice(2));

var http = require('http');
var app = require('../app');
var forceSSL = require('express-force-ssl');
app.use(forceSSL);

// HTTPS setup
// var fs = require('fs');
// var https = require('https');
// var ssl_options = {
//     key: fs.readFileSync( './encryption/localhost.key' ),
//     cert: fs.readFileSync( './encryption/localhost.cert'),
//     requestCert: false,
//     rejectUnauthorized: false
// };

const port = args.port || 3000;
app.set('port', port);
var server = http.createServer(app);
// var secureServer = https.createServer(ssl_options, app);

const os = require("os");
const nets = os.networkInterfaces();
const netIP = Object.values(nets)  // get ip accessible from other computers on the network
  .map(net => net.filter(net => net.family === "IPv4" && !net.internal))  // get external IPv4s
  .map(net => net?.[0]?.address)   // get the address from the the nets
  .filter(address => address)[0];  // filter out undefined and get the 1st element

server.listen(port, () => {
  console.log("Server accessible at the addresses:")
  console.log(`http://localhost:${port}`);
  console.log(`http://${netIP}:${port}`);
});
server.on('error', onError);
// secureServer.listen(443)

function onError(error) {
  if (error.syscall !== 'listen') { throw error; }
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      process.exit(1);
    case 'EADDRINUSE':
      process.exit(1);
    default:
      throw error;
  }
}
